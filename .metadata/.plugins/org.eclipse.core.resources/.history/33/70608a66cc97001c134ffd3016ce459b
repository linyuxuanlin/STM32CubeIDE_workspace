/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "sd_hal_mpu6050.h"
#include "math.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t aTxBuffer[] = "USART TEST\r\n"; //用于发�?�的字符�?
uint8_t aRxBuffer[20]; //用于接收的字符串
SD_MPU6050 mpu1; //加
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "stdio.h"
// 重定向print start
//_write函數在syscalls.c中， 使用__weak定義， 所以可以直接在其他文件中定義_write函數
__attribute__((weak)) int _write(int file, char *ptr, int len) {
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
		while ((USART1->SR & 0X40) == 0)
			; //等待发送完毕
		USART1->DR = (uint8_t) *ptr++;
	}
	return len;
}
// 重定向print  end

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */
	SD_MPU6050_Result result;
	uint8_t mpu_ok[15] = { "MPU WORK FINE\n" };
	uint8_t mpu_not[17] = { "MPU NOT WORKING\n" };
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_USART1_UART_Init();
	MX_I2C1_Init();
	/* USER CODE BEGIN 2 */
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*) aTxBuffer, sizeof(aTxBuffer) - 1); // 上发�?次自定义�? aTxBuffer
	HAL_UART_Receive_IT(&huart1, (uint8_t*) aRxBuffer, 1); // 接收中断启动函数

	HAL_UART_Transmit(&huart1, (uint8_t*) aTxBuffer, sizeof(aTxBuffer) - 1,
			0xFFFF); // 上发�?次自定义�? aTxBuffer

	result = SD_MPU6050_Init(&hi2c1, &mpu1, SD_MPU6050_Device_0,
			SD_MPU6050_Accelerometer_2G, SD_MPU6050_Gyroscope_250s);
	HAL_Delay(500);
	if (result == SD_MPU6050_Result_Ok) {
		HAL_UART_Transmit(&huart1, (uint8_t*) mpu_ok, sizeof(mpu_ok) - 1,
				0xFFFF);
	} else {
		HAL_UART_Transmit(&huart1, (uint8_t*) mpu_not, sizeof(mpu_not) - 1,
				0xFFFF);
	}
	HAL_Delay(500);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_Delay(50);
		SD_MPU6050_ReadTemperature(&hi2c1, &mpu1);
		float temper = mpu1.Temperature;
		SD_MPU6050_ReadGyroscope(&hi2c1, &mpu1);
		int16_t g_x = mpu1.Gyroscope_X;
		int16_t g_y = mpu1.Gyroscope_Y;
		int16_t g_z = mpu1.Gyroscope_Z;
		SD_MPU6050_ReadAccelerometer(&hi2c1, &mpu1);
		int16_t a_x = mpu1.Accelerometer_X;
		int16_t a_y = mpu1.Accelerometer_Y;
		int16_t a_z = mpu1.Accelerometer_Z;

		//HAL_UART_Transmit(&huart1, (uint8_t*)b, sizeof(b)- 1, 0xFFFF); //数据格式不对，需要int16_t转uint8_t
		//printf("g_x: %d, g_y: %d, g_z: %d\n", a_x, a_y, a_z);

		float  angle=-atan((float )a_x/(float )a_z)*180/3.14159;
		//int16_t  angle2=angle*100;

		//printf("x_angle: %d\r\n", (int16_t)angle);
		printf("x_angle: %f ", angle);
		printf("tempurature: %f\r\n", temper);

	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
		Error_Handler();
	}
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

