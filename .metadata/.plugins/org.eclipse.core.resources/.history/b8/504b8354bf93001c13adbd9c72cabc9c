/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "sd_hal_mpu6050.h"
#include "math.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t aTxBuffer[] = "USART TEST\r\n"; //用于发�?�的字符�????????
uint8_t aRxBuffer[20]; //用于接收的字符串
SD_MPU6050 mpu1; //�???????

uint16_t Motor_PWM_Val = 100;   //PWM 占空�?????????????
uint16_t Motor_Dir_Val = 1;   //电机转动方向，默认为正向

uint16_t Button_Val = 0;
extern uint16_t Button_Count;
uint16_t Button_Dir_Flag = 0;
uint16_t Button_PWM_Flag = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_write 函数�? syscalls.c 中， 使用 __weak 定义�? �?以可以直接在其他文件中定�? _write 函数
__attribute__((weak)) int _write(int file, char *ptr, int len) {
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
		while ((USART1->SR & 0X40) == 0)
			; //等待发�?�完�?
		USART1->DR = (uint8_t) *ptr++;
	}
	return len;
}

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */
	SD_MPU6050_Result result;
	uint8_t mpu_ok[15] = { "MPU WORK FINE\n" };
	uint8_t mpu_not[17] = { "MPU NOT WORKING\n" };
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_USART1_UART_Init();
	MX_I2C1_Init();
	MX_TIM2_Init();
	/* USER CODE BEGIN 2 */
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*) aTxBuffer, sizeof(aTxBuffer) - 1); // 上发�????????次自定义�???????? aTxBuffer
	HAL_UART_Receive_IT(&huart1, (uint8_t*) aRxBuffer, 1); // 接收中断启动函数

	HAL_UART_Transmit(&huart1, (uint8_t*) aTxBuffer, sizeof(aTxBuffer) - 1,
			0xFFFF); // 上发�????????次自定义�???????? aTxBuffer

	result = SD_MPU6050_Init(&hi2c1, &mpu1, SD_MPU6050_Device_0,
			SD_MPU6050_Accelerometer_2G, SD_MPU6050_Gyroscope_250s);
	HAL_Delay(500);
	if (result == SD_MPU6050_Result_Ok) {
		HAL_UART_Transmit(&huart1, (uint8_t*) mpu_ok, sizeof(mpu_ok) - 1,
				0xFFFF);
	} else {
		HAL_UART_Transmit(&huart1, (uint8_t*) mpu_not, sizeof(mpu_not) - 1,
				0xFFFF);
	}

	//待测�?????

	//printf("Init Motor_IN1_State: %d,  ",HAL_GPIO_ReadPin(Motor_IN1_GPIO_Port, Motor_IN1_Pin));
	//printf("Init Motor_IN1_State: %d,  ",HAL_GPIO_ReadPin(Motor_IN2_GPIO_Port, Motor_IN2_Pin));

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, Motor_PWM_Val); //to test
	printf("Init PWM_Val: %d\n", Motor_PWM_Val);

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		printf("Button_Val: %d, Button_Dir_Flag: %d, Button_PWM_Flag: %d   \n",
				Button_Val, Button_Dir_Flag, Button_PWM_Flag);
		if (Button_Count > 0 && Button_Count < 30000) {
			if (Button_Dir_Flag == 0) {
				Button_Dir_Flag = 1;
			} else {
				Button_Dir_Flag = 0;
			}
			Button_Count = 0;
		} else if (Button_Count >= 30000) {
			if (Button_PWM_Flag == 0) {
				Button_PWM_Flag = 1;
			} else {
				Button_PWM_Flag = 0;
			}
			Button_Count = 0;
		}

		if (Button_Dir_Flag == 0) {
			HAL_GPIO_WritePin(Motor_IN1_GPIO_Port, Motor_IN1_Pin, 1);
			HAL_GPIO_WritePin(Motor_IN2_GPIO_Port, Motor_IN2_Pin, 0);
		} else if (Button_Dir_Flag == 1) {
			HAL_GPIO_WritePin(Motor_IN1_GPIO_Port, Motor_IN1_Pin, 0);
			HAL_GPIO_WritePin(Motor_IN2_GPIO_Port, Motor_IN2_Pin, 1);
		}

		//电机循环启停
		for (Motor_PWM_Val = 0; Motor_PWM_Val < 100; Motor_PWM_Val++) {
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, Motor_PWM_Val); //to test
			printf("PWM_Val: %d (Rising)\n ", Motor_PWM_Val);
			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);  // Turn on LED
			HAL_Delay(50);
		}
		printf("PWM_Val: %d (Still)\n", Motor_PWM_Val);
		HAL_Delay(2000);
		for (Motor_PWM_Val = 100; Motor_PWM_Val > 0; Motor_PWM_Val--) {
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, Motor_PWM_Val); //to test
			printf("PWM_Val: %d (Decreasing)\n", Motor_PWM_Val);
			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);  // Turn off  LED
			HAL_Delay(50);
		}
		printf("PWM_Val: %d (Still)\n ", Motor_PWM_Val);
		HAL_Delay(2000);

		//HAL_Delay(50);
		/* MPU6050
		 SD_MPU6050_ReadTemperature(&hi2c1, &mpu1);
		 float temper = mpu1.Temperature;
		 SD_MPU6050_ReadGyroscope(&hi2c1, &mpu1);
		 int16_t g_x = mpu1.Gyroscope_X;
		 int16_t g_y = mpu1.Gyroscope_Y;
		 int16_t g_z = mpu1.Gyroscope_Z;
		 SD_MPU6050_ReadAccelerometer(&hi2c1, &mpu1);
		 int16_t a_x = mpu1.Accelerometer_X;
		 int16_t a_y = mpu1.Accelerometer_Y;
		 int16_t a_z = mpu1.Accelerometer_Z;

		 float angle = -atan((float) a_x / (float) a_z) * 180 / 3.14159;

		 printf("x_angle: %f ", angle);
		 printf("tempurature: %f\r\n", temper);
		 */

		// 按键换向
		/*
		 if (Motor_Dir_Val == 0) {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
		 } else {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
		 }
		 printf("%d\n",dir);
		 */

	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
		Error_Handler();
	}
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

