/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "mpu6050.h"
#include "math.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t aTxBuffer[] = "USART TEST\r\n"; //用于发�?�的字符�???????????
uint8_t aRxBuffer[20]; //用于接收的字符串

MPU6050_t MPU6050;

uint16_t Motor_PWM_Val = 0;   //PWM 占空�????????????????

int16_t Motor_Dir_Flag = 1; //转动方向标志位，-1为反�?0为停�?1为正�?
uint16_t Motor_PWM_Flag = 0;

int16_t System_Dir_Flag = 0; //系统欲转动的方向，初始为0

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_write 函数�???? syscalls.c 中， 使用 __weak 定义�???? �????以可以直接在其他文件中定�???? _write 函数
__attribute__((weak)) int _write(int file, char *ptr, int len) {
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
		while ((USART1->SR & 0X40) == 0)
			; //等待发�?�完�????
		USART1->DR = (uint8_t) *ptr++;
	}
	return len;
}

// Motor control
void Motor_Control() {
	if (Motor_Dir_Flag == -1) {
		HAL_GPIO_WritePin(Motor_IN1_GPIO_Port, Motor_IN1_Pin, 0);
		HAL_GPIO_WritePin(Motor_IN2_GPIO_Port, Motor_IN2_Pin, 1);
	}
	if (Motor_Dir_Flag == 1) {
		HAL_GPIO_WritePin(Motor_IN1_GPIO_Port, Motor_IN1_Pin, 1);
		HAL_GPIO_WritePin(Motor_IN2_GPIO_Port, Motor_IN2_Pin, 0);
	}
	if (Motor_Dir_Flag == 0) {
		HAL_GPIO_WritePin(Motor_IN1_GPIO_Port, Motor_IN1_Pin, 1);
		HAL_GPIO_WritePin(Motor_IN2_GPIO_Port, Motor_IN2_Pin, 1);
	}
	/*
	 if (Motor_PWM_Flag == 1 && Motor_PWM_Val < 100) {
	 Motor_PWM_Val++;
	 } else if (Motor_PWM_Flag == 0 && Motor_PWM_Val > 0) {
	 Motor_PWM_Val--;
	 }*/

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, Motor_PWM_Val);
}

//Generate 'System_Dir_Flag'  according to 'MPU_X_Angle', and then output 'Motor_Dir_Flag' and 'Motor_PWM_Val'
void MPU_Motor() {

	//init soft start
	if (System_Dir_Flag == 0 && MPU6050.KalmanAngleX < 30)
		System_Dir_Flag = 2;
	if (System_Dir_Flag == 0 && MPU6050.KalmanAngleX >= 30)
		System_Dir_Flag = -2;

	//soft stop
	if (System_Dir_Flag == 2 && MPU6050.KalmanAngleX > 30)
		System_Dir_Flag = 1;
	if (System_Dir_Flag == -2 && MPU6050.KalmanAngleX < -30)
		System_Dir_Flag = -1;

	//soft change direction
	if (System_Dir_Flag == 1 && Motor_PWM_Val == 0)
		System_Dir_Flag = -2;
	if (System_Dir_Flag == -1 && Motor_PWM_Val == 0)
		System_Dir_Flag = 2;

	if (System_Dir_Flag == 0) {
		Motor_Dir_Flag = 0;
		Motor_PWM_Val = 0;
	}

	if (System_Dir_Flag == 2) {
		Motor_Dir_Flag = 1;
		if (Motor_PWM_Val < 100)
			Motor_PWM_Val++;
	}

	if (System_Dir_Flag == 1) {
		Motor_Dir_Flag = 1;
		if (Motor_PWM_Val > 0)
			Motor_PWM_Val--;
	}

	if (System_Dir_Flag == -2) {
		Motor_Dir_Flag = -1;
		if (Motor_PWM_Val < 100)
			Motor_PWM_Val++;
	}

	if (System_Dir_Flag == -1) {
		Motor_Dir_Flag = -1;
		if (Motor_PWM_Val > 0)
			Motor_PWM_Val--;
	}

}

// Serial print outputs
void Serial_Print() {

	printf("%x",0);
	//HAL_UART_Transmit(&huart1, (uint8_t*) "0", sizeof("0") - 1,0xFFFF);
	//00 00 00 11 12 13

	/*
	//printf("Motor_PWM_Flag: %d, \t", Motor_PWM_Flag);

	//printf("MPU_X_Angle: %f\t", MPU_X_Angle);

	printf("MPU6050.KalmanAngleX: %f\t", MPU6050.KalmanAngleX);
	printf("System_Dir_Flag: %d\t", System_Dir_Flag);
	printf("Motor_Dir_Flag: %d\t", Motor_Dir_Flag);
	printf("Motor_PWM_Val: %d\t", Motor_PWM_Val);

	//printf("MPU_Temper: %f, ", MPU_Temper);

	printf("\n\r");
	*/

}

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPIO_Init();
	MX_USART1_UART_Init();
	MX_I2C1_Init();
	MX_TIM2_Init();
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	HAL_UART_Receive_IT(&huart1, (uint8_t*) aRxBuffer, 1); // 接收中断启动函数
	HAL_UART_Transmit(&huart1, (uint8_t*) aTxBuffer, sizeof(aTxBuffer) - 1,
			0xFFFF); // 上发�???????????次自定义�??????????? aTxBuffer

	HAL_Delay(10); // necessary
	while (MPU6050_Init(&hi2c1) == 1)
		;

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		MPU6050_Read_All(&hi2c1, &MPU6050);

		MPU_Motor();
		Motor_Control();  // Motor control

		Serial_Print(); // Serial print outputs
		HAL_Delay(50);

		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		//电机循环启停
		/*
		 printf("PWM_Val: %d (Still)\n", Motor_PWM_Val);
		 HAL_Delay(2000);
		 for (Motor_PWM_Val = 100; Motor_PWM_Val > 0; Motor_PWM_Val--) {
		 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, Motor_PWM_Val); //to test
		 printf("PWM_Val: %d (Decreasing)\n", Motor_PWM_Val);
		 //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);  // Turn off  LED
		 HAL_Delay(50);
		 }
		 printf("PWM_Val: %d (Still)\n ", Motor_PWM_Val);
		 //HAL_Delay(2000);

		 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
		Error_Handler();
	}
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

